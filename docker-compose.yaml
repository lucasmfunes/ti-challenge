version: '3.8'

services:

  zookeeper:
    image: confluentinc/cp-zookeeper:6.2.0
    container_name: zookeeper
    networks:
      - broker-kafka
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:6.2.0
    container_name: kafka
    networks:
      - broker-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ADVERTISED_HOST_NAME: kafka:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT

  kafdrop:
    image: obsidiandynamics/kafdrop:3.27.0
    networks:
      - broker-kafka
    depends_on:
      - kafka
      - zookeeper
    ports:
      - 19000:9000
    environment:
      KAFKA_BROKERCONNECT: kafka:29092

  sftp:
    container_name: sftp
    build:
      context: ./sftp
      dockerfile: Dockerfile
      args:
        SFTP_USER: ${SFTP_USER}
        SFTP_PASSWORD: ${SFTP_PASSWORD}
    ports:
      - "2222:22"
    env_file:
      - .env
    networks:
      - broker-kafka

  loader-app:
    container_name: loader-app
    build:
      context: ./loader-app
      dockerfile: Dockerfile
    environment:
      - SFTP_USER=${SFTP_USER}
      - SFTP_PASSWORD=${SFTP_PASSWORD}
      - SFTP_PORT=${SFTP_PORT}
    ports:
      - 8001:8001
    restart: "always"
    env_file:
      - .env
    depends_on:
      - zookeeper
      - kafka
      - extraction-app
    networks:
      - broker-kafka
    volumes:
      - shared-data:/app/data

  extraction-app:
    container_name: extraction-app
    build:
      context: ./extraction-app
      dockerfile: Dockerfile
    ports:
      - 8002:8002
    restart: "always"
    env_file:
      - .env
    depends_on:
      - zookeeper
      - kafka
    networks:
      - broker-kafka
  
  api:
    build:
      context: ./api
    env_file:
      - .env
    ports:
      - "5000:5000"
    depends_on:
      - loader-app
    volumes:
      - shared-data:/app/data
    networks:
      - broker-kafka

  frontend:
    build:
      context: ./frontend
    ports:
      - "8080:80"
    depends_on:
      - api
    networks:
       - broker-kafka

volumes:
  shared-data:

networks:
  broker-kafka:
    driver: bridge